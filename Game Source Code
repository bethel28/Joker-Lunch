import random

"""
Generate the deck of cards
#Parameters: None
#Return values: deck = list
"""
def buildDeck():
  #example Card: 2 of Hearts, Ace of Diamonds, Joker
  values = ["Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King"]
  suits = ["Clubs", "Spades", "Hearts", "Diamonds"]
  deck= []
  for suit in suits:
    for value in values:
      cardVal= "{} of {}".format(value, suit)
      deck.append(cardVal)
  deck.extend(["Joker", "Joker"])
  random.shuffle(deck)
  return deck


"""
Draws X number of cards off the deck to each player
#Parameters: num = Integer
#Return Values: None
"""
def dealCards(num):
  #creates two lists one for computer and one for player so they have card selection (deals the cards to player)
  global comp
  global player
  global DoC
  for i in range(0, num, 1):
    comp.append(DoC.pop(i))
  player=DoC[0:num]
  DoC=DoC[num:]


"""""
Show formatted list of player's hand
#Parameters: None
#Return Values: None
"""""
def showHand():
  global player
  print("\n---------\nYour cards:")
  for i in range(len(player)):
    print("{}) {}".format((i+1),player[i]))
  print("---------")

def winner():
  global comp
  if len(comp)>len(player):
    print("You have less cards than the computer as they have ",len(comp)," and you have ",len(player))
    print("Sadly you lose, Better luck next time :(")
  else:
      print("You have more cards than the computer as they have ",len(comp)," and you have ",len(player))
      print("Well done, you win!!!")

"""
Compares the card's value to any other card
#Parameters: user = List, pos = Integer
#Return Values: cardPlace = Integer
"""
def check(user, pos):
  val= ["2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace", "Joker"]
  cardPlace=user[pos]
  cardPlace=cardPlace.split()
  cardPlace=val.index(cardPlace[0])
  return cardPlace

"""
Checks to see if players can still continue with the game
#Parameters: comp = List, player = List
#Return Values: endGame = Boolean
"""
def canPlay(comp, player):
  #Looks through entire list of cards that the player and computer have to see if any are higher than ToD
  global top
  if len(comp)>1 and len(player)>1:
    lessP=True
    lessC=True
    val= ["2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King","Ace","Joker"]
    b=top.split()
    b=val.index(b[0])
    for i in range(0,len(comp)):
      a=check(comp,i)
      if a>=b:
        lessC=False
    for x in range(0,len(player)):
      a=check(player, x)
      if a>=b:
        lessP=False
    if lessP==False or lessC==False:
      endGame=False
    else:
      print("\n\nNone of you have any more higher cards, so the game is now over")
      winner()
      endGame=True
      quit()
  else:
    if len(comp)<=1:
      print("\n\nThe computer has 1 card or less meaning they lose and you win,\nWell Done!!!")
    elif len(player)<=1:
      print("\n\nYou have 1 card or less meaning you lose and the computer wins,\nBetter luck next time :(")
    endGame=True
    quit()
  return endGame

"""
Randomly swaps 2 cards between players
#Parameters: None
#Return Value: None
"""
def swapCards():
  global comp
  global player
  for i in range(2):
    pos1=random.randint(0,(len(comp)-1))
    pos2=random.randint(0,(len(player)-1))
    mark=comp[pos1]
    comp[pos1]=player[pos2]
    player[pos2]=mark



"""
Changes what is on top of the deck
#Parameters: top = String
#Return Values: None
"""
def ToD(a):
  global top
  top = a



"""
Allows Joker card to swap deck if chosen
#Parameters: None
#Return Values: None
"""
def joker():
  global comp
  global player
  global playerTurn
  global top
  print("\n\nThe 'Joker' card was selected")
  print("Now you and the computer will swap cards")
  mark = []
  mark = comp
  comp = player
  player = mark
  values = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King"]
  suits = ["Clubs", "Spades", "Hearts", "Diamonds"]
  val = random.randint(0,11)
  sui = random.randint(0,3)
  top = "{} of {}".format(values[val],suits[sui])
  if (playerTurn+1)%2==0:
    showHand()

  

  
"""
Players look through list and choose the cards they want to nominate
#Parameters:
#Return Values: None
"""
def nominate():
  #Allows player to select 2 cards that they would like to nominate and also validates cards
  global top
  global hCard
  global lCard
  global lower
  global higher
  global swap
  swap = False
  correct = False
  val= ["2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace", "Joker"]
  count=0
  #checks to see what kind of cards player has
  b=top.split()
  b=val.index(b[0])
  onlylower=True
  if (playerTurn%2)==1:
    while correct == False:
      for i in range(0,len(player)):
        a=check(player, i)
        if a>=b:
          onlylower=False #if only lower cards left
          count=count+1    #if only higher cards left
      if onlylower==False and count != len(player): #They have a mix of cards
        lower= int(input("\nSelect the lower card that you would like to nominate: "))
        lower=lower-1
        lCard=check(player, lower)
        while lCard >= b: #ensure player selects the lower card
          print("Error: That is not a valid lower card")
          lower= int(input("Please select the lower card that you would like to nominate: "))
          lower=lower-1
          lCard=check(player, lower)
      elif count==len(player): #if only higher they can select any card
        lower= int(input("\nSelect any card that you would like to nominate: "))
        lower=lower-1
      else: #makes them do the swap cards if only lower
        print("\nYou only have lower cards, so you will swap 2 random cards with the computer.")
        print("Sadly, you will miss your go because of this")
        swapCards()
        swap = True
      if swap == False and count != len(player):
        higher= int(input("Select the higher card that you would like to nominate: "))
        higher=higher-1
        hCard=check(player, higher)
        while hCard < b:
          print("Error: That is not a valid higher card")
          higher= int(input("Please select the higher card that you would like to nominate: "))
          higher=higher-1
          hCard=check(player, higher)
      elif swap == False and count == len(player):
        higher= int(input("Select any card that you would like to nominate: "))
        higher=higher-1
        hCard=check(player, higher)

      correctQ=input("You've chosen '{}' as your lower card and '{}' as your higher card.\nIs this correct? (y/n) ".format(player[lower],player[higher]))
      while correctQ.lower() != 'y' and correctQ.lower() != 'n':
        print("Error: that is not a valid response")
        correctQ=input("Please select either 'y' or 'n': ")
      if correctQ.lower() == 'y':
        correct = True
  else:
    for i in range(0,len(comp)):
      a=comp[i]
      a=a.split()
      a=val.index(a[0])
      if a>=b:
        onlylower=False #if only lower cards left
        count=count+1    #if only higher cards left
    if onlylower==False and count != len(comp): #They have a mix of cards
      lower=random.randint(0,len(comp))
      lower=lower-1
      lCard=check(comp, lower)
      while lCard >= b: #ensure comp selects the lower card
        lower=random.randint(0,len(comp))
        lower=lower-1
        lCard=check(comp, lower)
    elif count==len(comp): #if only higher they can select any card
      lower=random.randint(0,len(comp))
      lower=lower-1
    else: #makes them do the swap cards if only lower
      print("\nThe computer only has lower cards, so they will swap 2 random cards with you.")
      print("Sadly, they will miss their go because of this")
      swapCards()
      swap = True
    if swap == False:
      higher=random.randint(0,len(comp))
      higher=higher-1
      hCard=check(comp, higher)
      while hCard < b:
        higher=random.randint(0,len(comp))
        higher=higher-1
        hCard=check(comp, higher)

"""
Players are able to make the decision to choose whether to try and trick the computer or not
Parameters: None
Return Values: None
"""
def trickDecision(trick):
  global playerTurn
  if (playerTurn%2) == 1:
    decision=input("\n\nWould you like to try and trick the computer? (y/n): ")
    while decision.lower() != "y" and decision.lower() != "n":
      print("Error: Invalid answer")
      decision=input("Please select whether you'd like to try and trick the computer? (y/n): ")
    if decision.lower() == "y":
      trick = True
    else:
      trick = False
  else:
    decision = random.randint(0,2)
    if decision == 1:
      trick = True
    else:
      trick = False
  return trick

def ace(a):
  global newAce
  global aceTop
  global top
  global aceSwitch
  if newAce == True:
    aceTop = a
    print("\n\nTop of Deck:\n",aceTop)
    top = "2 of hearts"
  else:
    print("\n\nTop of Deck:\n",aceTop)
    top = "2 of hearts"
  aceSwitch = True

"""
Removes 2 random cards from the players
Parameters: user = List, num = Integer
Return Values: user = List
"""
def remove(user, num):
  global higher
  global lower
  global hCard
  global newAce
  global aceTop
  global aceSwitch
  gone = []
  if user == player:
    if num == 0:
      for i in range(2):
        gone.append(user.pop(random.randint(0,(len(user)-2))))
        print("\nCard removal: '{}' was removed from you.".format(gone[i]))
      if aceTop[0:3] == "Ace":
        newAce = False #ace is not on top of deck
        ace(gone[1])
      else:
        aceSwitch = False
    elif num == 1:
      if hCard == 13:
        gone.append(user.pop(lower))
        gone.append(user.pop(higher-1))
      else:
        gone.extend([user.pop(lower), user.pop(higher)])
      for i in range(2):
        print("\nCard removal: '{}' was removed from you and placed in the centre.".format(gone[i]))
      if hCard == 12:
        newAce = True #ace is now on top of deck
        ace(gone[1])
      else:
        aceTop = "2 of Hearts"
        aceSwitch = False
    else:
      if hCard == 13:
        gone.append(user.pop(higher-1))
      else:
        gone.append(user.pop(higher))
      for i in range(1):
        print("\nCard removal: '{}' was removed from you and placed in the centre.".format(gone[i]))
      if hCard == 12:
        newAce = True #ace is now on top of deck
        ace(gone[0])
      else:
        aceTop = "2 of Hearts"
        aceSwitch = False
  else:
    if num == 0:
      for i in range(2):
        pos = random.randint(0,(len(user)-2))
        gone.append(user.pop(pos))
        print("\nCard removal: '{}' was removed from the computer.".format(gone[i]))
      if aceTop[0:3] == "Ace":
        newAce = False #ace is not on top of deck
        ace(gone[1])
      else:
        aceSwitch = False
    elif num == 1:
      if hCard == 13:
        gone.append(user.pop(lower))
        gone.append(user.pop(higher-1))
      else:
        gone.extend([user.pop(lower), user.pop(higher)])
      for i in range(2):
        print("\nCard removal: '{}' was removed from the computer and placed in the centre.".format(gone[i]))
      if hCard == 12:
        newAce = True #ace is now on top of deck
        ace(gone[1])
      else:
        aceTop = "2 of Hearts"
        aceSwitch = False
    else:
      if hCard == 13:
        gone.append(user.pop(higher-1))
      else:
        gone.append(user.pop(higher))
      for i in range(1):
        print("\nCard removal: '{}' was removed from the computer and placed in the centre.".format(gone[i]))
      if hCard == 12 :
        newAce = True #ace is now on top of deck
        ace(gone[0])
      else:
        aceTop = "2 of Hearts"
        aceSwitch = False
  return user


"""
Determines whether the trick was successful or not
Parameters:
Return Values: 
"""
def SuccessOrFail(trick):
  global higher
  global lower
  global newAce
  if (playerTurn%2) == 0:
    if trick == True:
      believe=input(("\n\nThe computer says that card1 is their lower card which is '{}' and card2 is their higher card which is '{}'.\nDo you believe them? (y/n)\n".format(comp[lower], comp[higher])))
      while believe.lower() != "y" and  believe.lower() != "n":
        print('Error: Invalid answer given')
        believe=input("Please select either 'y' or 'n': ")
      if believe.lower() == 'y':
        print("\nSadly, you guessed wrong and chose the lower card.")
        print("Now two of your cards will randomly be chosen to be removed.")
        print("Maybe next time you should'nt trust that slimy computer :(")
        remove(player,0)
      else:
        print("\nWell done for being skeptical, the computer was trying to trick you.")
        print("Now they will face the consequences, both suggested cards will be placed in the middle.")
        ToD(comp[higher])
        remove(comp,1)
        if hCard == 13:
          joker()
    else:
      believe=input(("\n\nThe computer says that card1 is their lower card which is '{}' and card2 is their higher card which is '{}'.\nDo you believe them? (y/n)\n".format(comp[lower], comp[higher])))
      while believe.lower() != "y" and  believe.lower() != "n":
        print('Error: Invalid answer given')
        believe=input("Please select either 'y' or 'n': ")
      if believe.lower() == 'y':
        print("\nBeing trusting paid off")
        print("The computer was telling the truth")
        print("Now the higher card will be placed in the middle")
        ToD(comp[higher])
        remove(comp,2)
        if hCard == 13:
          joker()
      else:
        print("\nYou were too skeptical, the computer was telling the truth.")
        print("Now two of your cards will randomly be chosen to be removed.")
        print("Maybe next time you should trust the amazing computer ;)")
        remove(player,0)
  if (playerTurn%2)==1:
    if trick == True:
      believe = random.randint(0,1)
      if believe == 0:
        print("\n\nThe computer is very trusting and believed your trickery")
        print("Now two of their cards will randomly be removed")
        print("Poor computer :(")
        remove(comp,0)
      else:
        print("\n\nThe computer isn't silly")
        print("They didn't believe your trickery, not for a single second")
        print("Now both of the cards you suggested will be placed in the centre")
        ToD(player[higher])
        remove(player,1)
        if hCard == 13:
          joker()
    else:
      believe = random.randint(0,1)
      if believe == 0:
        print("\n\nThe computer is very trusting and believed you")
        print("Luckily for them you did not try and trick them")
        print("Your higher card will now be placed in the centre")
        ToD(player[higher])
        remove(player,2)
        if hCard == 13:
          joker()
      else:
        print("\n\nOh... that's embarrassing")
        print("The computer thought that you were trying to trick them")
        print("Now two of their cards will be randomly selected and removed")
        remove(comp,0)
  return trick




#mainpy
DoC=buildDeck()

comp = []
player = []
#Asks player for the number of cards they want and validates it
cardNum= int(input("How many cards would you like to have:\n(Maximum is 26\nMinimum is 7): "))
while cardNum>26 or cardNum<7:
  print("Error: Invalid response")
  cardNum= int(input("Please choose a number between 7 and 26: "))


dealCards(cardNum)
playerTurn=1
endGame=False
round1=True
top=DoC[0]
offDeck = True
aceTop = "2 of Hearts"

t=True #trick is initally True (use parameter to ensure that trick is being changed)
jokerStop=0 #prevents the top in the first round from being joker

#The main game
while endGame==False:
  endGame=canPlay(comp, player)
  if round1 == True:
    showHand()
    while top == 'Joker':
      top=DoC[jokerStop+1]
    print("\n\nTop of Deck:\n",top)
    if top[0:3] == 'Ace':
      newAce = True #checks whether a new ace has been placed on top
      aceTop = top #stores value of ace before
      top = '2 of Hearts' #allows ace to reset the deck
    nominate()
    if swap == False:
      t=trickDecision(t)
      t=SuccessOrFail(t)
      round1=False
      playerTurn=playerTurn+1
  else:
    if (playerTurn%2)==1:
      next=input(" ") #Delay
      showHand()
      if aceSwitch == False:
        print("\n\nTop of Deck:\n",top)
      nominate()
      if swap == False:
        t=trickDecision(t)
        t=SuccessOrFail(t)
        playerTurn=playerTurn+1
    else:
      next=input(" ") #Delay
      if aceSwitch == False:
        print("\n\nTop of Deck:\n",top)
      nominate()
      if swap == False:
        t=trickDecision(t)
        t=SuccessOrFail(t)
        playerTurn=playerTurn+1
